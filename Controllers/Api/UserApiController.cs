using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MessengerApp.Data;
using MessengerApp.Models;
using Microsoft.AspNetCore.Authorization;

namespace MessengerApp.Controllers.Api
{
    [Route("api/user")]
    [ApiController]
    [Authorize] // üîê —Ç–µ–ø–µ—Ä—å –≤—Å—ë API –∑–∞—â–∏—â–µ–Ω–æ ‚Äî —Ç—Ä–µ–±—É–µ—Ç –ª–æ–≥–∏–Ω
    public class UserApiController : ControllerBase
    {
        private readonly AppDbContext _context;

        public UserApiController(AppDbContext context)
        {
            _context = context;
        }

        // -------------------- GET: api/user --------------------
        [HttpGet]
        public async Task<ActionResult<IEnumerable<User>>> GetUsers()
        {
            return await _context.Users
                .Where(u => u.IsActive)
                .ToListAsync();
        }

        // -------------------- GET: api/user/5 --------------------
        [HttpGet("{id}")]
        public async Task<ActionResult<User>> GetUser(int id)
        {
            var user = await _context.Users.FindAsync(id);

            if (user == null || !user.IsActive)
                return NotFound();

            return user;
        }

        // -------------------- POST: api/user --------------------
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –±–µ–∑ –ª–æ–≥–∏–Ω–∞
        [AllowAnonymous] // ‚úÖ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        [HttpPost]
        public async Task<ActionResult<User>> CreateUser(User user)
        {
            user.CreatedAt = DateTime.UtcNow;
            user.IsActive = true;
            user.ModerationStatus = "Pending"; // üö¶ –Ω–æ–≤—ã–µ ‚Äî –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
        }

        // -------------------- PUT: api/user/5 --------------------
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateUser(int id, User updatedUser)
        {
            if (id != updatedUser.Id)
                return BadRequest();

            var user = await _context.Users.FindAsync(id);
            if (user == null || !user.IsActive)
                return NotFound();

            user.Username = updatedUser.Username;
            user.DepartmentId = updatedUser.DepartmentId;
            user.PasswordHash = updatedUser.PasswordHash;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        // -------------------- DELETE (soft delete): api/user/5 --------------------
        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º / –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        [Authorize(Roles = "Admin,Moderator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> SoftDeleteUser(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null || !user.IsActive)
                return NotFound();

            user.IsActive = false;
            user.DeletedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}
